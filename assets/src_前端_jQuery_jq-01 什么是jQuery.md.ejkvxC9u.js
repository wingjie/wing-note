import{_ as e,c as i,o as s,ag as r}from"./chunks/framework.Dpoz9nJ7.js";const l="/assets/jq-01_%E4%BB%80%E4%B9%88%E6%98%AFjQuery-01.N_97qWuw.png",c=JSON.parse('{"title":"jq-01 什么是jQuery","description":"","frontmatter":{},"headers":[],"relativePath":"src/前端/jQuery/jq-01 什么是jQuery.md","filePath":"src/前端/jQuery/jq-01 什么是jQuery.md","lastUpdated":1710326451000}'),t={name:"src/前端/jQuery/jq-01 什么是jQuery.md"};function n(o,a,p,h,u,d){return s(),i("div",null,[...a[0]||(a[0]=[r('<h1 id="jq-01-什么是jquery" tabindex="-1">jq-01 什么是jQuery <a class="header-anchor" href="#jq-01-什么是jquery" aria-label="Permalink to &quot;jq-01 什么是jQuery&quot;">​</a></h1><h2 id="一、什么是jquery" tabindex="-1">一、什么是jQuery <a class="header-anchor" href="#一、什么是jquery" aria-label="Permalink to &quot;一、什么是jQuery&quot;">​</a></h2><p>​ jQuery 是一个优秀的 JavaScript 库，是一个由 John Resig 创建于 2006 年 1 月的开源项目。现在的 jQuery 团队主要包括核心库、UI、插件和 jQuery Mobile 等开发人员以及推广和网站设计、维护人员。</p><p>​ jQuery 凭借简洁的语法和跨平台的兼容性，极大地简化了 JavaScript 开发人员遍历HTML 文档、操作DOM、处理事件、执行动画和开发 ajax 的操作。总之，无论是网页设计师、后台开发者、业余爱好者还是项目管理者，也无论是 JavaScript 初学者还是 JavaScript高手，都有足够多的理由去学习 jQuery。</p><h2 id="二、jquery的优点" tabindex="-1">二、jQuery的优点 <a class="header-anchor" href="#二、jquery的优点" aria-label="Permalink to &quot;二、jQuery的优点&quot;">​</a></h2><p>jQuery强调的理念是写得少，做得多（write less, do more），jQuery独特的选择器、链式操作、事件处理机制和封装完善的 ajax 都是其他库望尘莫及的。概括起来，jQuery有以下优势。</p><ol><li>轻量级。</li><li>强大的选择器。</li><li>出色的 DOM 操作的封装。</li><li>可靠的事件处理机制。</li><li>完善的 ajax。</li><li>不污染顶级变量。</li><li>出色的浏览器兼容性。</li><li>链式操作方式。</li><li>隐式迭代。</li><li>行为层和结构层分离。</li><li>丰富的插件支持。</li><li>完善的文档。</li><li>开源。</li></ol><h2 id="三、下载jquery" tabindex="-1">三、下载jQuery <a class="header-anchor" href="#三、下载jquery" aria-label="Permalink to &quot;三、下载jQuery&quot;">​</a></h2><ol><li>去官方网站下载：<a href="http://jquery.com/" target="_blank" rel="noreferrer">http://jquery.com/</a></li><li>去 CDN 下载：<a href="https://www.bootcdn.cn/jquery/" target="_blank" rel="noreferrer">https://www.bootcdn.cn/jquery/</a></li></ol><h2 id="四、jquery-库类型说明" tabindex="-1">四、jQuery 库类型说明 <a class="header-anchor" href="#四、jquery-库类型说明" aria-label="Permalink to &quot;四、jQuery 库类型说明&quot;">​</a></h2><p>jQuery库的类型分为两种，分别是生产版本（最小化和压缩版）和开发版（未压缩版），</p><p>它们的区别是：</p><p>​ 开发版：完整无压缩版本，主要用于测试、学习、和开发；</p><p>​ 生产版：经过工具压缩或经过服务器开启 Gzip 压缩，主要应用于产品和项目；</p><p><img src="'+l+`" alt="image"></p><h2 id="五、jquery版本" tabindex="-1">五、jQuery版本： <a class="header-anchor" href="#五、jquery版本" aria-label="Permalink to &quot;五、jQuery版本：&quot;">​</a></h2><p>jQuery 库分为 1.x 的版本和 2.x、3.x 的版本，1.x 的版本兼容 IE678，而 2.x、3.x的版本不兼容 IE678。</p><p>国内多数网站还在使用1.x的版本</p><h2 id="六、引入方式" tabindex="-1">六、引入方式 <a class="header-anchor" href="#六、引入方式" aria-label="Permalink to &quot;六、引入方式&quot;">​</a></h2><p>jQuery 不需要安装，他就是一个 js 文件，把下载的 jQuery 放到一个公共的位置，想要在某个页面上使用 jQuery 时，只需要在相关的 HTML 文档中引入该库文件即可。</p><p>一般可以放在 head 标签中或者 <code>&lt;/body&gt;</code> 标签前面，但是一定要注意，要在其它 js 文件前面引入 jQuery 库。</p><p>当我们需要使用 jQuery 的时候，会在 HTML 文档中引入 jquery.js, 可以通过以下两种方式引入：</p><p>● CDN 引入（CDN 的全称是 Content Delivery Network，即内容分发网络） ● 本地 jQuery 文件引入</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 方式一：引入 CDN 服务 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">”https://cdn.bootcss.com/jquery/1.7.1/jquery.min.js”</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 方式二：引用本地文件 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- &lt;script src=”js/jquery.min.js”&gt;&lt;/script&gt; --&gt;</span></span></code></pre></div><p>注：引入jquery必须放在所有其他script标签之前；</p><p>jquery中2.0以上的版本不兼容ie6,7,8；</p><h2 id="七、jquery与-的关系" tabindex="-1">七、jQuery与$的关系 <a class="header-anchor" href="#七、jquery与-的关系" aria-label="Permalink to &quot;七、jQuery与$的关系&quot;">​</a></h2><p>$ 就是 jQuery 的一个简写形式， $(‘#f00’) 和 jQuery(‘#foo’) 是等价的，$.ajax 和 jQuery.ajax 是等价的。</p><h2 id="八、页面加载" tabindex="-1">八、页面加载 <a class="header-anchor" href="#八、页面加载" aria-label="Permalink to &quot;八、页面加载&quot;">​</a></h2><ol><li><code>$(document).ready(function(){})</code>;</li><li><code>$(function(){})</code>；简写；</li></ol><p>和原生文档加载完的区别：</p><p>①原生：必须把所有的元素都加载完（包括图片），并且只能写一个onload；</p><p>②jquery：只把页面的结构加载完，读取到标签就可以了，可以写多个；</p><ol start="3"><li><p>$(document).ready() 同 window.onload 的区别：</p><pre><code> 1. 执行时机不同，window.onload 必须等待网页中所有的内容加载完毕后（包括图片）才能执行，而 $(document).ready() 是网页中所有 DOM 结构绘制完毕就执行，可能 DOM 元素关联的东西并没有加载完。
 2. window.onload 只能写一个 , 多个时后面的会覆盖掉前面的，而 $(document).ready() 可以写多个，不会覆盖。
 3. window.onload没有简写形式，而$(document).ready()可以简写成$(function (){})。
</code></pre></li></ol><h2 id="九、元素" tabindex="-1">九、元素 <a class="header-anchor" href="#九、元素" aria-label="Permalink to &quot;九、元素&quot;">​</a></h2><ol><li>dom元素：原生获取的就是dom元素（[HTMLCollection]）；</li><li>jquery元素：k.fn.init的元素就是jquery元素（k.fn.init）;</li></ol><h2 id="十、转换元素" tabindex="-1">十、转换元素 <a class="header-anchor" href="#十、转换元素" aria-label="Permalink to &quot;十、转换元素&quot;">​</a></h2><p>使用jquery元素不能使用原生的方法，不能混着用，可以转换元素使用；</p><ol><li>$(li)，将使用dom获取li变量的元素转换为jquery的元素；</li><li>jquery转dom：①$(&quot;li&quot;).get(下标)，②$(&quot;li&quot;)[下标] 转dom加下标，转jquery加$；</li></ol><h2 id="十一、和其他框架冲突" tabindex="-1">十一、和其他框架冲突 <a class="header-anchor" href="#十一、和其他框架冲突" aria-label="Permalink to &quot;十一、和其他框架冲突&quot;">​</a></h2><p>jQuery使用$符号的方式，还可以直接使用jQuery；</p><ol><li>让渡：jQuery.noConflict();<br> 将$符让给其他的库使用，自己还可以使用jQuery来代替$； 如果jQuery库还想使用$符,可以使用闭包，将jQuery作为实参，$作为形参；</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    $</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;li&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})(jQuery);    使用$作为形参使用；</span></span></code></pre></div><ol start="2"><li>改变：<code>var j = jQuery.noConflict()</code>；声明任意变量来替换$符；改变之后不能再使用$；</li></ol>`,44)])])}const j=e(t,[["render",n]]);export{c as __pageData,j as default};
