import{_ as s,c as a,o as e,ag as p}from"./chunks/framework.Dpoz9nJ7.js";const o="/assets/node-08_mongodb-01.tD_PNEMD.png",g=JSON.parse('{"title":"node-08 mongodb","description":"","frontmatter":{},"headers":[],"relativePath":"src/前端/node/node-08 mongodb.md","filePath":"src/前端/node/node-08 mongodb.md","lastUpdated":1710326451000}'),n={name:"src/前端/node/node-08 mongodb.md"};function t(d,i,l,h,r,k){return e(),a("div",null,[...i[0]||(i[0]=[p('<h1 id="node-08-mongodb" tabindex="-1">node-08 mongodb <a class="header-anchor" href="#node-08-mongodb" aria-label="Permalink to &quot;node-08 mongodb&quot;">​</a></h1><h2 id="一、mongodb" tabindex="-1">一、mongodb <a class="header-anchor" href="#一、mongodb" aria-label="Permalink to &quot;一、mongodb&quot;">​</a></h2><ol><li><p>为什么要使用数据库</p><p>把数据进行持久化，之前学习的文件数据持久化不安全，而且操作数据不方便；</p></li></ol><h3 id="mongodb简介" tabindex="-1">Mongodb简介 <a class="header-anchor" href="#mongodb简介" aria-label="Permalink to &quot;Mongodb简介&quot;">​</a></h3><ul><li>MongoDB是一个NoSQL的数据库；</li><li>MongoDB是一款文档型数据库；</li><li>数据库指的就是一个存储数据的仓库，数据库可以使我们完成对数据的持久化的操作</li><li>MongoDB数据库中存储的数据的基本单位就是文档，所谓文档其实就是一个json；</li><li>MongoDB中的“json” 我们称为BSON，比普通的JSON的功能要更加的强大；</li><li>MongoDB数据库使用的是JavaScript进行操作的，其实就是提供了一个javascript的运行环境，可以使用javascript的代码，在MongoDB含有一个对ES标准实现的引擎，在MongoDB中所有ES中的语法中都可以使用；</li><li>nodejs和mongodb数据库是标配；</li></ul><h3 id="传统的数据库" tabindex="-1">传统的数据库 <a class="header-anchor" href="#传统的数据库" aria-label="Permalink to &quot;传统的数据库&quot;">​</a></h3><p>先安装数据库软件---数据库--数据表--数据表才是真正的数据（记录）</p><p>Nosql当中</p><p>先安装数据库软件--数据库--集合--文档</p><p>比如淘宝用的Mysql数据库</p><p>安装mysql--taobao--user|product.....小明（人|对象|文档|纪录）；</p><h3 id="安装mongodb" tabindex="-1">安装MongoDB <a class="header-anchor" href="#安装mongodb" aria-label="Permalink to &quot;安装MongoDB&quot;">​</a></h3><p>官网：<a href="https://www.mongodb.com" target="_blank" rel="noreferrer">https://www.mongodb.com</a></p><p>下载：<a href="https://www.mongodb.com/download-center/community" target="_blank" rel="noreferrer">https://www.mongodb.com/download-center/community</a></p><p>安装时，有一个东西不能勾选，否则会一直卡住；</p><p><img src="'+o+`" alt="image"></p><p>安装之后添加环境；</p><p>图形化工具：Studio 3T</p><p>无限试用： <a href="https://www.lanzoui.com/i4jycdc" target="_blank" rel="noreferrer">https://www.lanzoui.com/i4jycdc</a></p><h3 id="使用mongodb数据库" tabindex="-1">使用MongoDB数据库 <a class="header-anchor" href="#使用mongodb数据库" aria-label="Permalink to &quot;使用MongoDB数据库&quot;">​</a></h3><ol><li><p>启动数据库服务</p></li><li><p>在C盘根目录下创建data文件夹，在data下创建db文件夹</p></li><li><p>进入安装的mongoDB目录，在bin文件夹下打开cmd，输入：<code>mongod</code></p><p>注：默认保存的数据目录在c:/data/db文件；</p><p>默认命令端口是27017；</p><p>开启之后命令窗口不能关闭；之后再开一个cmd窗口，输入mongo即可使用了</p></li><li><p>指定路径或端口的启动：</p><p><code>mongod --dbpath 数据库路径[--port端口号]</code></p><p>语法：mongod --dbpath=c:/data/db</p><p>一般不需要指定路径；</p></li></ol><h3 id="数据库的概念" tabindex="-1">数据库的概念 <a class="header-anchor" href="#数据库的概念" aria-label="Permalink to &quot;数据库的概念&quot;">​</a></h3><p><strong>数据库（database）</strong>：</p><p>---在MongoDB中，数据库和集合会在创建文档时会自动创建；</p><p><strong>集合（collections）</strong>：</p><p>---集合就是一组文档，也就是集合是用来存放文档的；</p><p>---集合中存储的文档可以是各种各样的，没有格式要求</p><p><strong>文档（document）对象</strong>；</p><p>---类似于JS中的对象，在MongoDB中每一条数据都是一个文档；</p><p>多个文档组成集合，多个集合组成数据库；</p><h2 id="一、数据库基本操作" tabindex="-1">一、数据库基本操作 <a class="header-anchor" href="#一、数据库基本操作" aria-label="Permalink to &quot;一、数据库基本操作&quot;">​</a></h2><ol><li><p>连接<code>mongodb</code>：</p><p>启动mongodb：mongod；启动之后不能关闭</p><p>连接mongodb：mongo；</p></li><li><p>mongodb基本语法：</p><p><code>show dbs</code>：查看所有数据库；</p><p><code>use demo</code>：使用数据库，没有则创建</p><p><code>db</code>：当前使用的数据库；</p><p><code>show collections</code>：显示当前数据库中的集合</p></li></ol><h2 id="二、插入db数据" tabindex="-1">二、插入db数据 <a class="header-anchor" href="#二、插入db数据" aria-label="Permalink to &quot;二、插入db数据&quot;">​</a></h2><p><code>db.collections.insert()</code></p><p>括号可以写数组、对象；</p><p>如果添加的对象里的键名在前面没有，也不影响；</p><p>示例：<code>db.shops.insert([{gid:1,gname:&#39;张三&#39;},{gid:2,gname:&#39;李四&#39;}])</code></p><ul><li><p><code>insert()</code>可以添加一个或多个文档，可以是一个对象或一个数组；</p></li><li><p>可以是对象或数组中的对象；</p></li><li><p>添加时如果集合或数据库不存在，会自动创建；</p></li><li><p>插入的文档对象会默认添加_id属性，是文档的唯一标识，不同于其它数据库；</p></li><li><p>id生成的原理：机器码+时间戳</p></li></ul><h2 id="三、查找find" tabindex="-1">三、查找find() <a class="header-anchor" href="#三、查找find" aria-label="Permalink to &quot;三、查找find()&quot;">​</a></h2><p><code>db.collections.find({查询条件},{要显示的属性[1:显示,0:隐藏]})</code></p><p><code>mongodb</code>底层不会隐式转换数据类型，如果数字加引号，则查询时也必须加引号；</p><p><code>mongodb</code>就是提供了一个JavaScript运行环境</p><ul><li>不填写参数时，默认显示全部的数据(表)；</li></ul><p><code>db.user.find({gname:&#39;张三&#39;},{gid:1,_id:0})</code>; 显示gname是张三的，只显示gid；</p><p><code>ObjectId()</code>；是mongodb新增的一种类型；直接运行会生成一个新的id；</p><p>如果是使用<code>_id</code>查询，需要使用<code>_id:ObjectId(&#39;id&#39;)</code>；</p><h3 id="查询的关键词" tabindex="-1">查询的关键词 <a class="header-anchor" href="#查询的关键词" aria-label="Permalink to &quot;查询的关键词&quot;">​</a></h3><p><code>$lt</code>(小于)、<code>$lte</code>(小于等于)、<code>$gt</code>、<code>$gte</code>、<code>$ne</code>(不等于)、<code>$in</code>(包含)、<code>$nin</code>(not)、<code>$or</code>(或)</p><h3 id="使用查询关键词" tabindex="-1">使用查询关键词 <a class="header-anchor" href="#使用查询关键词" aria-label="Permalink to &quot;使用查询关键词&quot;">​</a></h3><ul><li><p>小于：<code>db.collections.find({age:{$lt:8}})</code></p></li><li><p>包含：<code>db.collections.find({age:{$in:[18,20]}})</code> $in必须有中括号;</p></li><li><p>或者：<code>db.collections.find({$or:[{age:18},{age:20}]})</code> 等价于$in;</p></li><li><p>并且：<code>db.collections.find({name:&#39;张三&#39;,age:18})</code>；</p></li><li><p>查询类别为11的商品价格大于4000或商品名称为小米手机的商品信息</p><p><code>db.goods.find({cateid:11,$or:[{price:{$gt:4000}},{gname:&#39;小米手机&#39;}]})</code></p><p>查询出来是一个数组，可以加[0]显示第一条信息；</p></li></ul><h3 id="限制条数limit" tabindex="-1">限制条数limit <a class="header-anchor" href="#限制条数limit" aria-label="Permalink to &quot;限制条数limit&quot;">​</a></h3><p><code>db.goods.find().limit(5)</code></p><h3 id="跳过skip" tabindex="-1">跳过skip <a class="header-anchor" href="#跳过skip" aria-label="Permalink to &quot;跳过skip&quot;">​</a></h3><p><code>db.goods.find().limit(5).skip(5)</code></p><p>分页规则：skip中的值=(页数-1)*条数；</p><h3 id="排序sort" tabindex="-1">排序sort <a class="header-anchor" href="#排序sort" aria-label="Permalink to &quot;排序sort&quot;">​</a></h3><p>有两个值：1：升序，-1：倒序</p><p>sort值可以是多个条件，下面示例当价格相当则按照gid排序；</p><p><code>db.goods.find({cateId:{$in:[11,12]}}).sort({price:-1,gid:1})</code></p><h3 id="返回记录条数count" tabindex="-1">返回记录条数count <a class="header-anchor" href="#返回记录条数count" aria-label="Permalink to &quot;返回记录条数count&quot;">​</a></h3><p><code>db.goods.find().count()</code></p><h2 id="四、修改update" tabindex="-1">四、修改update() <a class="header-anchor" href="#四、修改update" aria-label="Permalink to &quot;四、修改update()&quot;">​</a></h2><p><code>db.goods.update({find条件},{对象})</code></p><p>如果直接这样写，会把满足条件的记录修改成一个新对象；</p><p><strong>修改$set</strong></p><p><code>db.goods.update({},{$set:{}},{multi:true})</code>；</p><p>如果修改多个需要加<code>{multi:true}</code>；</p><p><strong>移除$unset</strong></p><p><code>db.goods.update({},{$unset:{}})</code></p><p>属性值不能省略；</p><p>注意：update()默认只修改满足条件的一条记录，修改多个需要加<code>{multi:true}</code>;</p><p><code>updateOne()</code>；只修改满足条件的一条记录；</p><p><code>updateMany()</code>；更新多个；</p><p>也可以直接使用<code>{multi:true}</code>；</p><h2 id="五、删除remove" tabindex="-1">五、删除remove() <a class="header-anchor" href="#五、删除remove" aria-label="Permalink to &quot;五、删除remove()&quot;">​</a></h2><p><strong>物理删除</strong></p><p><code>db.&lt;collection&gt;.remove({find条件},是否删除一条)</code>；默认删除多条；</p><p>直接使用<code>remove()</code>叫物理删除，不安全</p><p><strong>逻辑删除</strong></p><p>开发中使用的是逻辑删除，一般都是用逻辑删除的；</p><p>逻辑删除需要定义一个id，并自定义值，例：1：删除，0：修改；</p><p>需要删除的时候使用<code>update</code>修改定义的id值；实在不需要可以使用<code>remove</code>删除；</p><h2 id="六、其他方法" tabindex="-1">六、其他方法 <a class="header-anchor" href="#六、其他方法" aria-label="Permalink to &quot;六、其他方法&quot;">​</a></h2><ol><li><code>db.&lt;collection&gt;.drop()</code>；删除集合(表)；</li></ol><p><code>remove</code>只会清空集合里面的数据，不会删除集合；</p><ol start="2"><li>优化mongodb：</li></ol><p>循环添加</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    db.goods.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>优化</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({x});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">db.goods.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr);</span></span></code></pre></div><h2 id="七、数据库备份" tabindex="-1">七、数据库备份 <a class="header-anchor" href="#七、数据库备份" aria-label="Permalink to &quot;七、数据库备份&quot;">​</a></h2><p>注意：使用命令导出必须退出mongo环境</p><h3 id="导出mongodump备份" tabindex="-1">导出mongodump备份 <a class="header-anchor" href="#导出mongodump备份" aria-label="Permalink to &quot;导出mongodump备份&quot;">​</a></h3><p><code>mongodump -d 数据库 -o 文件路径</code>；</p><p>（2）常用：<code>mongodump -d myblog -o c:/data/dbs</code></p><p>（3）-d省略导出所有数据库</p><h3 id="还原数据库" tabindex="-1">还原数据库 <a class="header-anchor" href="#还原数据库" aria-label="Permalink to &quot;还原数据库&quot;">​</a></h3><p><code>mongorestore -d 数据库 --drop 文件路径</code>；</p><p>--drop：先删除所有的记录，然后恢复；</p><p>（2）常用：<code>mongorestore c:/data/dbs</code>；还原所有；</p><p>dump和还原格式是json和bson，无法指定表</p><h3 id="导出表" tabindex="-1">导出表 <a class="header-anchor" href="#导出表" aria-label="Permalink to &quot;导出表&quot;">​</a></h3><p>mongoexport导出表，或者表中部分字段；</p><p><code>mongoexport -d 数据库 -c 表名 -f 字段 -q 条件导出 --csv -o 文件名</code></p><p>示例：<code>mongoexport -d demo -c users --csv -f name,age,city -q &quot;{uid:{$gt:1}}&quot; -o c:data/demo.csv</code>;</p><p>--csv 导出的文件格式为csv的，大部分关系型数据库都是支持csv的；（比较有用）</p><p>-q 需要是双引号；</p><p>（2）常用：<code>mongoexport -d demo -c users -o c:/data/mydemo.dat</code>；导出整张表；</p><p>格式可以是dat、csv、json都行</p><h3 id="导入表" tabindex="-1">导入表 <a class="header-anchor" href="#导入表" aria-label="Permalink to &quot;导入表&quot;">​</a></h3><ul><li>还原非csv文件整张表；</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mogoimport</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 数据库</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 表名</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --upsert</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --drop文件名；</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 示例：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mongoimport</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> demo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> users</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --upsert</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> c:/data/users.dat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>--upsert：插入或者更新现有的数据；</p><ul><li>还原部分字段的导出文件</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mogoimport</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 数据库</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 表名</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --upsertFields</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 字段</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --drop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 文件名；</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 示例：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mongoimport</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> demo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> users</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --upsertFields</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> uid,name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /data/users.json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><code>--upsertFields</code>和<code>--upsert</code>一样；</p><ul><li>还原导出的csv文件</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mongoimport</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 数据库</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 表名</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 类型</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --headerline</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --upsert</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --drop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 文件名；</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 示例：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mongoimport</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> demo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> users</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> csv</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --headerline</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /data/users.csv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="六、其他数据库" tabindex="-1">六、其他数据库 <a class="header-anchor" href="#六、其他数据库" aria-label="Permalink to &quot;六、其他数据库&quot;">​</a></h2><ol><li><p>将数据放在json文件的缺陷：检索、查询、更新、删除比较麻烦；</p></li><li><p>数据库分为两类：</p><p>（1）sql数据库（关系型数据库）：SQLserver、Mysql、Orcale、Mongodb；</p><p>（2）NoSql数据库（非关系型数据库）：不仅仅是sql。Mongodb；</p></li><li><p>数据库主要分成两种</p><p>关系型数据库：关系数据库中全部是表；</p><p>数据库&lt;表&lt;记录：传统的数据库存放的是表，表里的数据叫记录(信息|数据)；</p><p>非关系型数据库：Nosql 是以json的键值对存储数据，存放的是集合，集合里面的是对象；</p></li><li><p>其他sql语言用法（了解）：</p><ul><li><p>查询：select * from 文件名 where uname=&#39;admin&#39;；</p></li><li><p>修改：update 文件名 set pwd=&#39;33&#39;,tel=&#39;123&#39; where uname=&#39;admin&#39;；</p></li><li><p>删除：delete from 文件名 where uname=&#39;admin&#39;；</p></li><li><p>添加：insert into 文件名 (uname,upwd)values(&#39;zs&#39;,&#39;123&#39;)；</p></li></ul></li><li><p>一般情况下：一个项目对应一个数据库；</p><p>一个数据库就是一个文件夹，</p><p>无论什么数据库都要安装在电脑上，具体的数据存储在数据库文件中，其实也是文件，数据库需要特殊形式打开；</p></li><li><p>mongodb：非关系型数据库</p><p>数据库&lt;集合&lt;对象(文档|记录)；</p></li></ol>`,120)])])}const m=s(n,[["render",t]]);export{g as __pageData,m as default};
